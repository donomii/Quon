((includes q/base.qon q/boolean.qon q/lists.qon q/newparser.qon q/compiler.qon q/macros.qon)
 (types)
 (functions


(int indexOfHelper (string haystack string needle int start int current) (declare)
  (body
    (if (greaterthan (add current (string-length needle)) (string-length haystack))
      (then (return -1))
      (else
        (if (equalString (sub-string haystack current (string-length needle)) needle)
          (then (return current))
          (else (return (indexOfHelper haystack needle start (add1 current)))))))))

(int indexOf (string haystack string needle int start) (declare)
  (body
    (if (equal (string-length needle) 0)
      (then (return start))
      (else (return (indexOfHelper haystack needle start start))))))


  (bool lessThan (int a int b) (declare)
    (body
      (return (andBool (not (equal a b)) (not (greaterthan a b))))))

  (string addParens (string line) (declare)
    (body
      (return (stringConcatenate "(" (stringConcatenate line ")")))))

  (int countLeadingSpaces (string line) (declare)
    (body
      (if (andBool (greaterthan (string-length line) 0) (equalString (sub-string line 0 1) " "))
        (then (return (add1 (countLeadingSpaces (sub-string line 1 (sub (string-length line) 1))))))
        (else (return 0)))))

(string addClosingParens (int count string line) (declare)
   (body
     (if (equal count 0)
       (then (return line))
       (else (return (addClosingParens (sub1 count) (stringConcatenate line ")") ))))))

(string processLine (string line int prevIndent) (declare
  (int currentIndent 0)
  (string processed ""))
  (body
    (set currentIndent (countLeadingSpaces line))
    (set processed (sub-string line currentIndent (sub (string-length line) currentIndent)))
    (set processed (addParens processed))
    (if (lessThan currentIndent prevIndent)
      (then (set processed (addClosingParens (sub prevIndent currentIndent) processed)))
      (else))
    (return processed)))


(list splitLines (string input int start) (declare
  (int newlinePos 0))
  (body
    (if (not (lessThan start (string-length input)))
      (then (return (emptyList)))
      (else
        (set newlinePos (indexOf input "\n" start))
        (if (equal newlinePos -1)
          (then (return (cons (boxString (sub-string input start (sub (string-length input) start))) (emptyList))))
          (else (return (cons (boxString (sub-string input start (sub newlinePos start)))
                              (splitLines input (add1 newlinePos))))))))))

  (list processLines (list lines int prevIndent) (declare
    (string line "")
    (string processed ""))
    (body
      (if (isEmpty lines)
        (then (return (emptyList)))
        (else
          (set line (unBoxString (car lines)))
          (if (equalString line "")
            (then (return (processLines (cdr lines) prevIndent)))
            (else
              (set processed (processLine line prevIndent))
              (return (cons (boxString processed)
                            (processLines (cdr lines) (countLeadingSpaces line))))))))))

(string convertToSexpr (string input) (declare 
  (list lines nil)
  (list processedLines nil)
  (string result ""))
  (body
    (set lines (splitLines input 0))
    (set processedLines (processLines lines 0))
    (set result (StringListJoin processedLines "\n"))
    (return (addClosingParens (countLeadingSpaces (unBoxString (car lines))) result))))


  (int start () (declare
    (string filename "")
    (string inputContent "")
    (string convertedContent ""))
    (body
      (if (lessThan globalArgsCount 2)
        (then
          (printf "Usage: new_converter <input_file>\n")
          (return 1))
        (else
          (set filename (getStringArray 1 globalArgs))
          (printf "Reading file: %s\n" filename)
          (set inputContent (read-file filename))
          (if (equalString inputContent "")
            (then
              (printf "Error: Could not read file or file is empty.\n")
              (return 1))
            (else
              (printf "%s\n" inputContent)
              (set convertedContent (convertToSexpr inputContent))
              (printf "%s\n" convertedContent)
              (return 0)))))))

 ))