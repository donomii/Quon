((includes q/base.qon q/macros.qon q/lists.qon q/astaccessors.qon q/perl.qon q/ansi.qon q/ansi2.qon q/tests.qon q/node.qon q/java.qon q/lua.qon q/imaginary.qon)
 (types)
 (functions

 (int start ()
 (declare 
  (bool runTests false)
  (list cmdLine nil)
  (box filename nil)
  (bool runPerl false)
  (bool runJava false)
  (bool runAst false)
  (bool runNode false)
   (bool runLua false)
   (bool runIma false)
   (bool runAnsi2 false)
  (bool runTree false))
   (body
    (set cmdLine (listReverse (argList globalArgsCount 0 globalArgs)))
    ;(printf "//") (display cmdLine)
    (if (> (listLength cmdLine) 1)
      (then (set filename (second cmdLine)))
      (else (set filename (boxString "compiler.qon"))))
    ;(printf "#Parsing file: ")(display filename)(newLine 0)
    (set runTests (inList (boxString "--test") cmdLine))
    (set runJava (inList (boxString "--java") cmdLine))
    (set runPerl (inList (boxString "--perl") cmdLine))
    (set runAst (inList (boxString "--ast") cmdLine))
    (set runTree (inList (boxString "--tree") cmdLine))
    (set runNode (inList (boxString "--node") cmdLine))
    (set runLua (inList (boxString "--lua") cmdLine))
    (set runIma (inList (boxString "--ima") cmdLine))
	(set runAnsi2 (inList (boxString "--ansi2") cmdLine))
    (set globalTrace (inList (boxString "--trace") cmdLine))
    (set globalStepTrace (inList (boxString "--steptrace") cmdLine))
    (if runTests
      (then
       (test0)
       (test1)
       (test2)
       (test3)
       (test4)
       (test5)
       (test6)
       (test7)
       (test8)
       (test9)
       (test10)
       (test12)
       (test13)
       (test15)
       (test16)
       (test17)
       (test18)
       (test19)
       (test20)
       (test21)
	   ;(test22)
       (printf "\n\nAfter all that hard work, I need a beer...\n")
       (beers 9))
      (else
      (if runTree
      (then (display (macrowalk (treeCompile (unBoxString filename)))))
      (else
      (if runAst
      (then (astCompile (unBoxString filename)))
      (else (if runNode
      (then
      (nodeCompile (unBoxString filename)) (printf "\n")
      )
      (else
      (if runPerl
      (then (perlCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runJava
      (then (javaCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runLua
      (then (luaCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runIma
      (then (imaCompile (unBoxString filename)) (printf "\n"))
      (else
	  (if runAnsi2
      (then (ansi2Compile (unBoxString filename)) (printf "\n"))
	  (else
      (ansiCompile (unBoxString filename)) (printf "\n")))))))))))))
      ))))))
    (return 0)
    ))
 ))
