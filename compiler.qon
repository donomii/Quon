((includes q/base.qon q/compiler.qon q/macros.qon q/lists.qon q/newparser.qon q/perl.qon q/ansi.qon q/ansi2.qon q/ansi3.qon q/tests.qon q/node.qon q/java.qon q/lua.qon q/boolean.qon q/imaginary.qon q/bash.qon )
 (types)
 (functions

 (int start ()
 (declare
  (bool runTests false)
  (list cmdLine nil)
  (box filename nil)
  (bool runPerl false)
  (bool runJava false)
  (bool runAst false)
  (bool runNode false)
   (bool runLua false)
   (bool runIma false)
   (bool runAnsi2 false)
   (bool runAnsi3 false)
   (bool runBash false)
   (bool runTree false))
   (body
    (set cmdLine (listReverse (argList globalArgsCount 0 globalArgs)))
    ;(printf "//") (display cmdLine)
    (if (> (listLength cmdLine) 1)
      (then (set filename (second cmdLine)))
      (else (set filename (boxString "compiler.qon"))))
    ;(printf "#Parsing file: ")(display filename)(newLine 0)
    (set releaseMode (inList (boxString "--release") cmdLine))
    (set runTests (inList (boxString "--test") cmdLine))
    (set runJava (inList (boxString "--java") cmdLine))
    (set runPerl (inList (boxString "--perl") cmdLine))
    (set runAst (inList (boxString "--ast") cmdLine))
    (set runTree (inList (boxString "--tree") cmdLine))
    (set runNode (inList (boxString "--node") cmdLine))
    (set runLua (inList (boxString "--lua") cmdLine))
    (set runIma (inList (boxString "--ima") cmdLine))
    (set runAnsi2 (inList (boxString "--ansi2") cmdLine))
    (set runAnsi3 (inList (boxString "--ansi3") cmdLine))
    (set runBash (inList (boxString "--bash") cmdLine))
    (set globalTrace (inList (boxString "--trace") cmdLine))
    (set globalStepTrace (inList (boxString "--steptrace") cmdLine))
    (if (inList (boxString "--help") cmdLine)
      (then
        (printf "Usage: quon file [options]\n\nNote the options go after the file name\n")
        (printf "Options:\n")
        (printf "  --help      Display this help\n")
        (printf "  --release   Compile in release mode\n")
        (printf "  --test      Run the test suite\n")
        (printf "  --java      Compile to Java\n")
        (printf "  --perl      Compile to Perl\n")
        (printf "  --ast       Compile to the Abstract Syntax Tree\n")
        (printf "  --tree      Compile to an s-expression tree\n")
        (printf "  --node      Compile to Node.js\n")
        (printf "  --lua       Compile to Lua\n")
        (printf "  --ima       Compile to Imaginary, the human-friendly language\n")
        (printf "  --ansi2     Compile to ANSI C, (quon version 2)\n")
        (printf "  --ansi3     Compile to ANSI C (quon version 3)\n")
        (printf "  --bash      Compile to Bash\n")
        (printf "  --trace     Trace execution\n")
        (printf "  --steptrace Step trace execution\n")
        (printf "  --help      Display this help\n")
        (exit 0)
      )
      (else )
    )
    (if runTests
      (then
       (test0)
       (test1)
       (test2)
       (test3)
       (test4)
       (test5)
       (test6)
       (test7)
       (test8)
       (test9)
       (test10)
       (test12)
       (test13)
       (test15)
       (test16)
       (test17)
       (test18)
       (test19)
       (test20)
       (test21)
       (test22)
       (test23)
	   ;(test22)
       (printf "\n\nAfter all that hard work, I need a beer...\n")
       (beers 9))
      (else
      (if runTree
      (then (display (macrowalk (treeCompile (unBoxString filename)))))
      (else
      (if runAst
      (then (astCompile (unBoxString filename)))
      (else (if runNode
      (then
      (nodeCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runPerl
      (then (perlCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runJava
      (then (javaCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runLua
      (then (luaCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runIma
      (then (imaCompile (unBoxString filename)) (printf "\n"))
      (else
      (if runAnsi2
      (then (ansi2Compile (unBoxString filename)) (printf "\n"))
      (else
      (if runAnsi3
      (then (ansi3Compile (unBoxString filename)) (printf "\n"))
	  (else
      (if runBash
      (then (bashCompile (unBoxString filename)) (printf "\n"))
	  (else
      (ansi3Compile (unBoxString filename)) (printf "\n")))))))))))))))))
      ))))))
    (sleep 20)
    (return 0)
    ))
 ))
