((includes )
 (types  )
  
 (functions
 
  (list macrowalk (list l ) (declare) (body
    (if (isEmpty l)
      (then (return nil))
      (else

	  ;(printf "//type: %s\n" (get-struct l typ))
       (if (isList l)
         (then
		 ;(printf "//Processing list\n")
		;	(printf "//Listlength: %d\n" (listLength l))
			;(display l)

        ;Handle boxList
          (if (equalString (stringConcatenate "box" "List") (stringify (car l)))
          (then
            ;(display (doBoxList (cdr l)))
          (return (car (doBoxList (cdr l)))))
          (else))

        ;Handle stringList
          (if (equalString (stringConcatenate "string" "List") (stringify (car l)))
          (then
            ;(display (doStringList (cdr l)))
          (return (car (doStringList (cdr l)))))
          (else))
          
          ;Handle symList
          (if (equalString (stringConcatenate "symbol" "List") (stringify (car l)))
          (then
           
          (return (car (doSymbolList (cdr l)))))
          (else))
		  (if (equalString (stringConcatenate "multi" "List") (stringify (car l)))
          (then
            ;(display (doStringList (cdr l)))
          (return (car (doMultiList (cdr l)))))
          (else))
		  
            (return   (cons (macrowalk (car l) ) (macrowalk (cdr l) ))))
         (else
         (return l)
			))))))



  (list macrosingle (list l string search string replace ) (declare (box val nil)) (body
    (if (isEmpty l)
      (then (return nil))
      (else

	  ;(printf "//type: %s\n" (get-struct l typ))
       (if (isList l)
         (then
            (return   (cons (macrosingle (car l) search replace) (macrosingle (cdr l) search replace ))))
         (else
                      ;(printf "---Processing non list: %s\n" (stringify l))
          ;(printf "--Comparing %s and %s at %s,%s\n" search (stringify l) (stringify (getTagFail l (boxString "line")(boxString "no tag"))) (stringify (getTagFail l (boxString "filename" )(boxString "no tag"))))
          
          (if (equalString search (stringify l))
            (then
				;(printf "---Matched!: %s\n" (stringify l))
              (set val (clone l))
              (set-struct val str replace)
              (return val))
            (else))
         (return l)
			))))))

  ;This time, replace is a list, search remains a string.  Every occurence of search is replaced with replace
  (list macrolist (list l string search list replace ) (declare (box val nil)) (body
    (if (isEmpty l)
      (then (return nil))
      (else

	  ;(printf "//type: %s\n" (get-struct l typ))
       (if (isList l)
         (then
          ;(printf "--Comparing %s and %s at %s,%s\n" search (stringify (car l)) (stringify (getTagFail (car l) (boxString "line")(boxString "no tag"))) (stringify (getTagFail (car l) (boxString "filename" )(boxString "no tag"))))
          (if (equalString search (stringify (car l)))
            (then
             ;(printf "---Matched!: %s, replacing with %s\n" (stringify l) (stringify replace))
             (return   (concatLists  replace (macrolist (cdr l) search replace ))))
            (else
            ;(printf "No match, returning %s\n" (cons l nil))
            (return (cons (macrolist (car l) search replace) (macrolist (cdr l) search replace )))))
          
            )
         (else
           ;(printf "---Processing non list: %s\n" (stringify l))
           ;(printf "--Comparing %s and %s at %s,%s\n" search (stringify l) (stringify (getTagFail l (boxString "line")(boxString "no tag"))) (stringify (getTagFail l (boxString "filename" )(boxString "no tag"))))
          
          
          (return l)
         
			))))))
			
 )
 )