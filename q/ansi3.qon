((includes)
 (types)

 (functions

(void ansi3displays (string s) (declare)
	(body
		(printf "%s" s)
	)
)

  (void ansi3FunctionArgs (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (if (equalString (stringify (first tree))  "...")
           (then (printf "..."))
           (else 
            (display (ansi3TypeMap (first tree)))
            (ansi3displays " ")
            (display (second tree))
            ))
       (if ( isNil (cddr tree)) (then ) (else (ansi3displays ", ")))
       (ansi3FunctionArgs (cddr tree))))))

 

  (void ansi3Expression (list tree int indent) (declare (list thing nil))
   (body
    (if (isList tree)
		;It is a function call
      (then 
	  
	  (if (equal 1 (listLength  tree))
				;A function call with no args
               (then
                (display (car  tree))
				;C does not allow "return();"
                (if (equalBox
                     (boxString "return")
                      (car  tree))
                  (then )
                  (else (ansi3displays "()"))))
               (else
			   ;Handle special functions
                (set thing (first   tree))
                (if (equalBox (boxSymbol "get-struct") thing)
				;Get a value from a C struct ref
                  (then
                   (printf
                    "%s->%s"
                    (stringify (second  tree))
                    (stringify (third  tree))))
                  (else
                   (if (equalBox (boxSymbol "new") thing)
				   ;Create a new value on the heap
                     (then
                      (printf
                       "malloc(sizeof(%s))"
                       (stringify  (third tree))))
                     (else
                      (if (equalBox (boxSymbol "passthrough") thing)
				   ;Print the second arg directly into the compiler output.  Hope you got it perfectly right!
                     (then
                      (printf
                       "%s"
                       (stringify  (second tree))))
                     (else
                      (if (equalBox (boxSymbol "binop") thing)
				   ;Print the second arg directly into the compiler output.  Hope you got it perfectly right!
                     (then
                      (printf "(")
                      (ansi3Expression (third tree) indent)
                      (printf
                       " %s "
                       (stringify  (second tree)))
                      (ansi3Expression (fourth tree) indent)
                      (printf ")")
                      )
					   ;It's a normal expression
                     (else
                      (printf
                       "%s("
                       (stringify
                        (ansi3FuncMap (car tree))))
                      (ansi3RecurList (cdr  tree) indent)
                      (printf ")")))))))))))
	  
	  
	  
	  
	  )
	  
	  ;It is a variable or literal
      (else (display (ansi3FuncMap  tree))))))
	  
  (void
   ansi3RecurList
   (list expr int indent)
   (declare)
   (body
    (if (isEmpty expr)
      (then (return))
      (else
       (ansi3Expression (car expr) indent)
       (if (isNil (cdr expr))
         (then (ansi3displays ""))
         (else (ansi3displays ", ") (ansi3RecurList (cdr expr) indent)))))
    ))
	
	

	

  (void ansi3If (list node int indent) (declare)
   (body
    (newLine indent)
    (ansi3displays "if ( ")
    (ansi3Expression (second node) 0)
    (ansi3displays ") {")
    (ansi3Body (cdr (third node)) (add1 indent))
    (newLine indent)
    (ansi3displays "} else {")
    (ansi3Body (cdr (fourth node)) (add1 indent))
    (newLine indent)
    (ansi3displays "}")))

  (void ansi3SetStruct (list node int indent) (declare)
   (body
    (newLine indent)
    (printf
     "%s->%s = "
     (stringify (second  node))
     (stringify (third  node)))
    (ansi3Expression (fourth node) indent)))

  (void ansi3GetStruct (list node int indent) (declare)
   (body
    (newLine indent)
    (printf
     "%s->%s"
     (stringify (first  node))
     (stringify (second  node)))))

  (void ansi3Set (list node int indent) (declare)
   (body
    (newLine indent)
    (ansi3Expression (first  (cdr node)) indent)
    (printf " = " )
    (ansi3Expression (third node) indent)))
	
  (void ansi3Return (list node int indent) (declare)
   (body
    (newLine indent)
	(if (equal (listLength node) 1) 
	(then (ansi3displays "return;"))
	(else 
    (ansi3displays "return ")
    (ansi3Expression (cadr node) indent)
	(ansi3displays ";")
	))))

  (void ansi3Statement (list node int indent) (declare)
   (body
    (if (equalBox (boxString "set") (first node))
      (then (ansi3Set node indent))
      (else
       (if (equalBox (boxString "set-struct") (first node))
         (then (ansi3SetStruct node indent))
         (else
          (if (equalBox (boxString "if") (first node))
            (then (ansi3If node indent))
            (else
             (if (equalBox (boxString "return") (first node))
               (then (ansi3Return node indent))
               (else
                (newLine indent)
                (ansi3Expression  node indent)))))))))
    (ansi3displays ";\n")))

  (void ansi3Body (list tree int indent) (declare (list code nil))
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (set code  tree)
       (if (isNil code)
       (then)
       (else
	(set code (car tree))
        (printf "\nif (globalTrace)\n    snprintf(caller, 1024, \"from %s:%s\");\n"  (stringify (getTagFail (car code)  (boxString "filename")  (boxString "Unknown file (not provided by parser)"))) (stringify (getTagFail (car code) (boxString "line") (boxString "Line missing") )))))
       (printIndent indent)
       (printf
        "%s"
        "if (globalStepTrace) printf(\"StepTrace %s:%d\\n\", __FILE__, __LINE__);\n")
       (ansi3Statement code indent)
       (ansi3Body (cdr tree) indent)))))

  (void ansi3Declarations (list decls int indent) (declare (box decl nil))
   (body
    (if (isEmpty decls)
      (then (return))
      (else
       (set decl (car decls))
       (printf
        "%s %s = "
        (stringify (ansi3TypeMap (first decl)))
        (stringify (second decl)))
       (ansi3Expression (third decl) indent)
       (printf ";\n")
       (ansi3Declarations (cdr decls) indent)))))

  (void ansi3Function (list node) (declare (box name nil))
   (body
    (set name  (second node))
    (printf "\n\n//Building function %s from line: %s" (stringify name) (stringify (getTag name (boxString "line"))))
    (newLine 0)
    (if (isNil node)
      (then (return))
      (else
       (newLine 0)
       (printf
        "%s %s("
        (stringify (ansi3TypeMap (first node)))
        (stringify (second node)))
       (ansi3FunctionArgs (third node))
       (printf ") {")
       (newLine 1)
       (ansi3Declarations (cdr (fourth node)) 1)
       (if (inList (toStr name) (noStackTrace))
       (then (printf ""))
       (else
           (printf "\nif (globalTrace)\n    printf(\"%s at %s:%s (%%s)\\n\", caller);\n" (stringify name) (stringify (getTag name (boxString "filename"))) (stringify (getTag name (boxString "line")))   )))
       (if (inList (toStr name) (noStackTrace))
         (then (printf ""))
         (else
          ;;(printf "\n  stackTracePush(\"%s\", \"%s\", %s, %d );\n" (stringify (getTag name (boxString "filename"))) (stringify name) (stringify (getTag name (boxString "line"))) 0)
          ))
	   ;(display (second(fifth node)))
       (ansi3Body (cdr (fifth node)) 1)
       (if (inList (toStr name) (noStackTrace))
         (then (printf ""))
         (else
            (printf "\nif (globalTrace)\n    printf(\"Leaving %s\\n\");\n" (stringify name))
            ))
       (printf "\n}\n")))))

  (void ansi3ForwardDeclaration (list node) (declare)
   (body
    (if (isNil node) (then (return)) (else
       (printf
        "\n%s %s("
        (stringify (ansi3TypeMap (first node)))
        (stringify (second node)))
       (ansi3FunctionArgs (third node))
       (ansi3displays ");")))))

  (void ansi3ForwardDeclarations (list tree) (declare)
   (body
    (if (isEmpty tree) (then (return)) (else
       (ansi3ForwardDeclaration (car tree))
       (ansi3ForwardDeclarations (cdr tree))))))

  (void ansi3Functions (list tree) (declare)
   (body
    (if (isEmpty tree) (then (return))(else 
		(ansi3Function (car tree)) (ansi3Functions (cdr tree))))))
	  
	  
  (void ansi3Includes (list nodes) (declare)
   (body
    (printf
     "%s"
     "\n//Start include block\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int*  array;\ntypedef int bool;\n#define true 1\n#define false 0\n\n\n\nvoid setAt(int* array, int index, int value) {\n    array[index] = value;\n}\n\nint start();  //Forwards declare the user's main routine\nchar* caller;\nchar** globalArgs;\nint globalArgsCount;\nbool globalTrace = false;\nbool globalStepTrace = false;\n\nint main( int argc, char *argv[] )  {\n  globalArgs = argv;\n  globalArgsCount = argc;\n  caller=calloc(1024,1);\n\n  return start();\n\n}\n\n")
     (printf "%s" "void qlog(const char* format, ...) { va_list args; va_start (args, format); vfprintf (stderr, format, args); va_end (args); }\n//End include block\n")
))

  (void ansi3TypeDecl (list l) (declare)
   (body
    (if (> (listLength l) 2)
      (then
       (printIndent 1)
       (printf
        "%s %s %s;\n"
        (stringify (second l))
        (stringify (ansi3TypeMap (listLast l)))
        (stringify (first l))))
      (else
       (printIndent 1)
       (printf
        "%s %s;\n"
        (stringify (ansi3TypeMap (listLast l)))
        (stringify (car l)))))))

  (void ansi3StructComponents (list node) (declare)
   (body
    (if (isEmpty node)
      (then (return))
      (else (ansi3TypeDecl (car node)) (ansi3StructComponents (cdr node))))))

  (void ansi3Struct (list node) (declare)
   (body (ansi3StructComponents (cdr  node))))

  (box ansi3TypeMap (box aSym) (declare (list symMap nil))
   (body
    (set
     symMap
     (alistCons
      (boxSymbol "stringArray")
      (boxSymbol "char**")
      (alistCons (boxSymbol "string") (boxSymbol "char*") nil)))
    (if (truthy (assoc (stringify aSym) symMap))
      (then (return (cdr (assoc (stringify aSym) symMap))))
      (else (return aSym)))))

  (box ansi3FuncMap (box aSym) (declare (list symMap nil))
   (body
    (if (equalString "symbol" (boxType aSym))
      (then
       (set
        symMap
        (alistCons
         (boxSymbol "=")
         (boxSymbol "equal")
         (alistCons
          (boxSymbol "sub-string")
          (boxSymbol "sub_string")
          (alistCons
           (boxSymbol "read-file")
           (boxSymbol "read_file")
           (alistCons
            (boxSymbol "write-file")
            (boxSymbol "write_file")
            (alistCons
             (boxSymbol ">")
             (boxSymbol "greaterthan")
             (alistCons
              (boxSymbol "string-length")
              (boxSymbol "string_length")
              (alistCons (boxSymbol "nil") (boxSymbol "NULL") nil))))))))

       (if (truthy (assoc (stringify aSym) symMap))
         (then (return (cdr (assoc (stringify aSym) symMap))))
         (else (return aSym))))
      (else (return aSym)))))

  (void ansi3Type (list node) (declare)
   (body
    (if (isList  (second node))
      (then
       (printf "\ntypedef struct %s {\n" (stringify (first  node)))
       (ansi3Struct  (second node))
       (printf "\n} %s;\n" (stringify (first  node))))
      (else (ansi3displays "typedef ") (ansi3TypeDecl  node)))
    ))

  (void ansi3Types (list nodes) (declare)
   (body
    (if (isEmpty nodes)
      (then (return))
      (else  (ansi3Type (car nodes)) (ansi3Types (cdr nodes))))))





(void ansi3Compile (string filename) (declare (list tree nil)(list replace nil))
    (body
  


   	(qlog "//Scanning file...%s\n" filename)
    
	(set tree (loadQuon filename))
   	(qlog "//Building sexpr\n")
    
	(set tree (loadIncludes tree))
	(set tree (macrowalk tree))
        (set replace (symbolList "fprintf" "stderr"))
       (set tree (macrolist tree (stringConcatenate "q" "log") replace))
  


   (qlog "//Printing program\n")

    (ansi3Includes (cdr (first tree)))
    (ansi3Types (cdr (second tree)))
	;(display (cdr (second tree)))(exit 1)
    (ansi3displays "Box* globalStackTrace = NULL;\n")
    (ansi3displays
     "\nbool isNil(list p) {\n    return p == NULL;\n}\n\n\n//Forward declarations\n")
    (ansi3ForwardDeclarations (cdr (third tree)))
    (ansi3displays "\n\n//End forward declarations\n\n")
    (ansi3Functions (cdr (third tree)))
    (ansi3displays "\n")))
  ))
