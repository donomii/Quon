  (( includes )
(types)
 (functions

  (list readSexpr (string aStr string filename) (declare (list tokens nil) (list as nil))
   (body
    (set tokens (emptyList))
    (set tokens (filterTokens (filterVoid (scan aStr 0 1 0 0 filename))))
    (set as (sexprTree tokens))
    (return (car as))))

  (list sexprTree (list l) (declare (box b nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set b (car l))
       (if (isOpenBrace b)
         (then
          (return (cons (sexprTree (cdr l)) (sexprTree (skipList (cdr l))))))
         (else
          (if (isCloseBrace b)
            (then (return (emptyList)))
            (else
             (return
              (setTag (boxString "line") (getTagFail b (boxString "line") (boxInt -1)) (cons b (sexprTree (cdr l))))
              )))))))

    ))
(list loadQuon (string filename) (declare   (string programStr "")  (list tree nil) )
(body

    (set programStr (read-file filename))
    (set tree (readSexpr programStr filename))
	
  (return tree)
))

(list getIncludes (list program) (declare)
  (body
    (return  (cdr (first program)))))

(list getTypes (list program) (declare)
  (body
    (return  (cdr (second program)))))

(list getFunctions (list program) (declare)
  (body
    (return  (cdr (third program)))))

(list insertInclude (list tree string extra) (declare
  (list newProg nil)
  (list includes nil)
  (list types nil)
  (list functions nil)
  (list boxedExtra nil)
  (list newIncludes nil))
(body

  (if (isNil tree)
    (then
      (return nil))
    (else
      (set includes (getIncludes tree))
      (set types (getTypes tree))
      (set functions (getFunctions tree))
      (set boxedExtra (cons (boxSymbol extra) nil))
      (set newIncludes (cons boxedExtra includes))
      (set newProg (buildProg newIncludes types functions))
      (return newProg))))
)

(list loadIncludes (list tree) (declare
  (list newProg nil)
  (string includeFile "") 
  (list functionsCombined nil)
  (list typesCombined nil)
  (list includeTree nil)
  (string contents ""))
(body
  (if (greaterthan (listLength (getIncludes tree)) 0)
    (then
      (set includeFile (stringify (first (getIncludes tree))))
      (set contents (read-file includeFile))
      (if (equalString contents "")
        (then
          (qlog "Could not read include file: ")
          (qlog includeFile)
          (return nil))
        (else
          (set includeTree (readSexpr contents includeFile))
          (if (isNil includeTree)
            (then
              (qlog "Could not parse include file: " )
              (qlog includeFile)
              (return nil))
            (else
              (set functionsCombined (concatLists (getFunctions includeTree) (getFunctions tree)))
              (set typesCombined (concatLists (getTypes includeTree) (getTypes tree)))
              (set newProg (buildProg (cdr (getIncludes tree)) typesCombined functionsCombined))
              (return (loadIncludes newProg)))))))
    (else
      (return tree)))))

(list buildProg (list includes list types list functions)(declare (list program nil))
(body
(set includes (cons (boxSymbol "includes") includes))
(set types (cons (boxSymbol "types") types))
(set functions (cons (boxSymbol "functions") functions))
  (set program (cons includes
            (cons types
              (cons functions nil))))
  (return program)
)
)
))
