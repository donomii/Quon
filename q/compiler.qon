((includes q/tests.qon q/macros.qon q/lists.qon)
 (types )
 (functions
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Parser functions
  ;;;;;;;;;;;;;;;;;;;;;;;

    (list
   filterVoid
   (list l)
   (declare (box token nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set token (car l))
       (if (equalString "void" (get-struct token typ))
         (then (return (filterVoid (cdr l))))
         (else (return (cons token (filterVoid (cdr l))))))))))
  (list
   filterTokens
   (list l)
   (declare (box token nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set token (car l))
       (if (equalString (boxType token) "symbol")
         (then
          (if (equalString "__LINE__" (stringify token))
            (then
             (return
              (cons
               (getTagFail token (boxString "line") (boxInt -1))
               (filterTokens (cdr l)))))
            (else
             (if (equalString "__COLUMN__" (stringify token))
               (then
                (return
                 (cons
                  (getTagFail token (boxString "column") (boxInt -1))
                  (filterTokens (cdr l)))))
               (else
                 (if (equalString "__FILE__" (stringify token))
                 (then
                   (return
                     (cons
                     (getTagFail token (boxString "filename") (boxString "Unknown file"))
                     (filterTokens (cdr l)))))
   (else
   (return (cons token (filterTokens (cdr l)))))))))))
         (else (return (cons token (filterTokens (cdr l))))))))))

  (box finish_token (string prog int start int len int line int column string filename) (declare (box token nil))
   (body
    (if (> len 0)
      (then
       (set token (boxSymbol (sub-string prog start len)))
       (set-struct
        token
        tag
        (alistCons (boxString "filename") (boxString filename)
         (alistCons (boxString "column") (boxInt column)
          (alistCons (boxString "line") (boxInt line)
           (alistCons (boxString "totalCharPos") (boxInt start) nil)))))
       (return token))
      (else (return (newVoid))))))

  (string readString (string prog int start int len) (declare (string token ""))
   (body
    (set token (sub-string prog (sub1 (add start len)) 1))
    (if (equalString "\"" token)
      (then (return (sub-string prog start (sub1 len))))
      (else
       (if (equalString "\\" token)
         (then (return (readString prog start (add 2 len))))
         (else (return (readString prog start (add1 len)))))
       ))))

  (string readComment (string prog int start int len) (declare (string token ""))
   (body
    (set token (sub-string prog (sub1 (add start len)) 1))
    (if (isLineBreak token)
      (then (return (sub-string prog start (sub1 len))))
      (else (return (readComment prog start (add1 len)))))))

  (bool
   isWhiteSpace
   (string s)
   (declare)
   (body
    (if (equalString " " s)
      (then (return true))
      (else
      (if (equalString "\t" s)
      (then (return true))
      (else
       (if (equalString "\n" s)
         (then (return true))
         (else
          (if (equalString "\r" s)
            (then (return true))
            (else (return false)))))))))))

  (bool isLineBreak (string s) (declare)
   (body
    (if (equalString "\n" s)
      (then (return true))
      (else
       (if (equalString "\r" s) (then (return true)) (else (return false)))))))
  (int
   incForNewLine
   (box token int val)
   (declare)
   (body
    (if (equalString "\n" (stringify token))
      (then (return (add1 val)))
      (else (return val)))))
  
(box annotateReadPosition (string filename int linecount int column int start box newBox) (declare)
(body
(return (setTag (boxString "filename")
                             (boxString filename)
                             (setTag (boxString "column")
                                     (boxInt column )
                                     (setTag (boxString "line" )
                                             (boxInt linecount )
                                             (setTag (boxString "totalCharPos" )
                                                     (boxInt start )
                                                     newBox)))))))

  (list scan (string prog int start int len int linecount int column string filename) (declare (box token nil) (string newString "") (box newBox nil))
   (body
   ;(qlog "Input: %s %d:%d\n" filename linecount column)
    (if (> (string-length prog) (sub start (sub 0 len)))
      (then
       (set token (boxSymbol (sub-string prog (sub1 (add start len)) 1)))
       (set-struct token tag (alistCons (boxString "totalCharPos") (boxInt start) nil))
       (if (isOpenBrace token)
         (then
          (return (cons
             (finish_token prog start (sub1 len) linecount column filename) (cons (boxSymbol (openBrace))
             (scan prog (add1 start) 1 linecount (add1 column) filename)))))
         (else
          (if (isCloseBrace token)
            (then
             (return
              (cons (finish_token prog start (sub1 len) linecount column filename)
               (cons (annotateReadPosition filename linecount column start (boxSymbol (closeBrace)))
                (scan prog (add start len) 1 linecount (add1 column) filename)))))
            (else
             (if (isWhiteSpace (stringify token))
               (then
                (return (cons (finish_token prog start (sub1 len) linecount column filename)
                  (scan prog (add start len) 1 (incForNewLine token linecount) 0 filename))))
               (else
                (if (equalBox (boxSymbol ";") token)
                  (then
                   (return (scan prog (add start (add1 (add1 (string-length (readComment prog (add1 start) len))))) 1 (add1 linecount) 0 filename)))
                  (else
                   (if (equalBox (boxSymbol "\"") token)
                     (then
                     (set newString (readString prog (add1 start) len))
                     (set newBox (annotateReadPosition filename linecount column start (boxString newString)))

                      (return (cons newBox (scan prog (add start (add1 (add1 (string-length newString)))) 1 linecount (add1 column) filename))))
                     (else
                      (return (scan prog start (sub len -1) linecount (add1 column) filename)))))))))))))
      (else (return (emptyList))))
    ))

  (bool isOpenBrace (box b) (declare)
   (body
    (if (equalBox (boxSymbol (openBrace)) b)
      (then (return true))
      (else
       (if (equalBox (boxSymbol "[") b)
         (then (return true))
         (else (return false)))))))
  (bool
   isCloseBrace
   (box b)
   (declare)
   (body
    (if (equalBox (boxSymbol (closeBrace)) b)
      (then (return true))
      (else
       (if (equalBox (boxSymbol "]") b)
         (then (return true))
         (else (return false)))))))



  (list skipList (list l) (declare (box b nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set b (car l))
       (if (isOpenBrace b)
         (then (return (skipList (skipList (cdr l)))))
         (else
          (if (isCloseBrace b)
            (then (return (cdr l)))
            (else (return (skipList (cdr l)))))))))

    ))




;;;;;;;;;;;;;;;;;;;;;;
;; Parser functions ;;
;;;;;;;;;;;;;;;;;;;;;;

  (list makeNode (string name string subname list code list children) (declare)
   (body
    (return
     (cons
      (boxSymbol "node")
      (alistCons
       (boxSymbol "line")
       (getTagFail code (boxString "line") (boxInt -1))
       (cons
        (cons (boxSymbol "name") (boxString name))
        (cons
         (cons (boxSymbol "subname") (boxString subname))
         (cons
          (cons (boxSymbol "code") code)
          (alistCons (boxSymbol "children") children (emptyList))))))))))

(list addToNode (box key box val list node) (declare)
(body
(return (cons (boxSymbol "node") (alistCons key val (cdr node))))
))

  (list makeStatementNode (string name string subname list code list children box functionName) (declare)
    (body
      (return (addToNode (boxSymbol "functionName") functionName (makeNode name subname code children)))
))

  (list astExpression (list tree) (declare)
   (body
    (if (isList tree)
      (then
       (return
        (makeNode "expression" "expression" nil (astSubExpression tree))))
      (else (return (astSubExpression tree))))))

  (list astSubExpression (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return (emptyList)))
      (else
       (if (isList tree)
         (then
          (return
           (cons (astExpression (car tree)) (astSubExpression (cdr tree)))))
         (else (return (makeNode "expression" "leaf" tree nil))))))))

  (list astIf (list tree box fname) (declare)
   (body
   (if (equalBox (boxString "then") (car (second tree)))
   (then (nop))
   (else
   (printf "Error at %s:%s!  If statement is missing the true branch.\n\n" (stringify (getTag (car (first tree)) (boxString "filename")))  (stringify (getTag (car (first tree)) (boxString "line"))))
   (panic "Missing true branch in if statement!  All if statements must have a true and false branch, like this:\n\n(if hungryForApples\n(then (printf \"yes!\"))\n(else (printf \"no!\")))\n\n\n")))

   (if (equalBox (boxString "else") (car (third tree)))
   (then (nop))
   (else
   (printf "Error at %s:%s!  If statement is missing the false branch.\n\n" (stringify (getTag (car (first tree)) (boxString "filename")))  (stringify (getTag (car (first tree)) (boxString "line"))))
   (panic "Missing false branch in if statement!  All if statements must have a true and false branch, like this:\n\n(if hungryForApples\n(then (printf \"yes!\"))\n(else (printf \"no!\")))\n\n\n")))
    (return
     (makeNode "statement" "if" tree
        (cons
           (cons (astExpression (first tree)) nil)
           (cons
            (astBody (cdr (second tree)) fname)
            (cons (astBody (cdr (third tree)) fname) nil)))))))

  (list astSetStruct (list tree) (declare)
   (body
    (return
     (makeNode "statement" "structSetter" tree (astExpression (third tree))))))

  (list astSet (list tree) (declare)
   (body
    (return
     (makeNode "statement" "setter" tree (astExpression (second tree))))))

  (list astGetStruct (list tree) (declare)
   (body (return (makeNode "expression" "structGetter" tree nil))))

  (list astReturnVoid (box fname)
   (declare)
   (body (return (makeStatementNode "statement" "returnvoid" nil nil fname))))

  (list astStatement (list tree box fname) (declare)
   (body

    (if (isList tree)
     (then (nop))
     (else
      (printf "Error at %s:%s!  Statement must be a list.\n\n" (stringify (getTag (car (first tree)) (boxString "filename")))  (stringify (getTag (car (first tree)) (boxString "line"))))
      (panic "A statement must be a list: (printf \"Hello\")\n\n\n")))

       
    (if (equalBox (boxString "if") (car tree))
      (then (return (astIf (cdr tree) fname)))
      (else
       (if (equalBox (boxString "set") (car tree))
         (then (return (astSet (cdr tree))))
         (else
          (if (equalBox (boxString "get-struct") (car tree))
            (then
             (printf "Choosing get-struct statement\n")
             (return (astGetStruct (cdr tree))))
            (else
             (if (equalBox (boxString "set-struct") (car tree))
               (then (return (astSetStruct (cdr tree))))
               (else
                   (if (equalBox  (boxString "return") (car tree))
                   (then
                        (if (equal (listLength tree) 1)
                        (then (return (astReturnVoid fname)))
                        (else
                          (return
                           (makeStatementNode "statement" "return" tree
                            (makeNode "expression" "expression" tree (astExpression tree)) fname )))))
                  (else
                   (return
                    (makeStatementNode
                       "statement" "statement" tree
                         (makeNode "expression" "expression" tree (astExpression tree) ) fname ))))))))))))))

  (list astBody (list tree box fname) (declare)
   (body
    (if (isEmpty tree)
      (then (return (emptyList)))
      (else (return (cons (astStatement (car tree) fname) (astBody (cdr tree) fname)))))))



  (list astFunction (list tree) (declare (string file "")(string line "")(box fname nil))
   (body
    (set fname (second tree))
    ;(printf "//ast building function %s\n" (stringify fname))
    ;(display tree)
    (set line (stringify (getTag fname (boxString "line"))))
    (set file (stringify (getTag fname (boxString "filename"))))
    (if (greaterthan 1 (listLength tree) ) (then (locPanic file line "Malformed function, seems to be empty"))(else))
    (if (greaterthan 2 (listLength tree) ) (then (locPanic file line "Malformed function, expected function name"))(else))
    (if (greaterthan 3 (listLength tree) ) (then (locPanic file line "Malformed function, expected argument list"))(else))
    (if (greaterthan 4 (listLength tree) ) (then (locPanic file line "Malformed function, expected variable declarations"))(else))
    (if (greaterthan 5 (listLength tree) ) (then (locPanic file line "Malformed function, expected body"))(else))
    (return
     (alistCons
      (boxSymbol "file")
      (getTag fname (boxString "filename"))
     (alistCons
      (boxSymbol "line")
      (getTag fname (boxString "line"))
      (cons
       (cons (boxSymbol "name") (boxString "function"))
       (cons
        (cons (boxSymbol "subname") (second tree))
        (cons
         (cons (boxSymbol "declarations") (cdr (fourth tree)))
         (cons
          (cons (boxSymbol "intype") (third tree))
          (cons
           (cons (boxSymbol "outtype") (car tree))
           (cons
            (cons (boxSymbol "children") (astBody (cdr (fifth tree)) fname))
            (emptyList))))))))))))

  (list astFunctionList (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return (emptyList)))
      (else
       (return
        (cons (astFunction (car tree)) (astFunctionList (cdr tree))))))))

  (list astFunctions (list tree) (declare)
   (body
    (if (equalBox  (boxString "functions")(car tree))
     (then (return (makeNode "functions" "functions" tree (astFunctionList (cdr tree)))))
     (else (panic "Functions section not found!  Every program must have a function section, even if you don't define any functions, although that is a rather pointless program.  Your function section should look like:'\n\n(return_type function_name (arg1 arg2 arg3 ...) (declare types) (body (statement)(statement)))\n\n\nThe function section must be directly after the types section.")
     (return nil)))
     ))

  (list loadLib (string path) (declare (string programStr "") (list tree nil) (list library nil))
   (body
    ;(qlog "Loading library %s\n" path)
    (set programStr (read-file path))
    (set tree (readSexpr programStr path))
    (set tree (macrowalk tree))
    (set library
     (alistCons
      (boxString "includes")
      (astIncludes (first tree))
      (alistCons
       (boxString "types")
       (astTypes (second tree))
       (alistCons (boxString "functions") (astFunctions (third tree)) nil))))
    (return library)))

  (list astInclude (list tree) (declare)
   (body (return (loadLib (stringify tree)))))

  (list astIncludeList (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return (emptyList)))
      (else
       (return (cons (astInclude (car tree)) (astIncludeList (cdr tree))))))))

  (list astIncludes (list tree) (declare)
   (body
    ;(printf "//Building includes AST...\n")
    (if (equalBox (boxString "includes") (car tree))
    (then (return (makeNode "includes" "includes" tree (astIncludeList (cdr tree)))))
     (else (panic "Includes section not found!  Every program must have an include section, even if you don't import any libraries.  Your include section should look like:'\n\n(includes file1.qon file.qon)\n\n\nThe includes section must be the first section of the file.")
     (return nil)))))

  (list astStruct (list tree) (declare)
   (body (return (makeNode "type" "struct" tree nil))))

  (list astType (list tree) (declare)
   (body
    (if (isList (cadr tree))
      (then (return (astStruct tree)))
      (else (return (makeNode "type" "type" tree nil))))))

  (list astTypeList (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return (emptyList)))
      (else (return (cons (astType (car tree)) (astTypeList (cdr tree))))))))

  (list astTypes (list tree) (declare)
   (body
   (if (isNil tree)
   (then (panic "Empty or absent types section")
         (return (boxString "!!!Fuck")))
   (else 
     (if (equalBox  (boxString "types")(car tree))
       (then (return (makeNode "types" "types" tree (astTypeList (cdr tree)))))
       (else
         (panic "Types section not found!  Every program must have a types section, even if you don't define any types")
         (printf "Types section not found!  Every program must have a types section, even if you don't define any types")
         (return (boxString "!!!Fuck"))
	 )
       )
     )
     )
 ))

  (list declarationsof (list ass) (declare)
   (body (return (cdr (assocPanic "declarations" (cdr ass) "Cons list has no declarations key")))))

  (list codeof (list ass) (declare)
   (body (return (cdr (assocPanic "code" (cdr ass) "Given cons list does not contain a code key")))))

  (list functionNameof (list ass) (declare)
   (body (return (cdr (assoc "functionName" (cdr ass))))))

  (list nodeof (list ass) (declare)
   (body
    (if (equalBox (boxBool false) (assoc "node" (cdr ass)))
      (then 
       (printf "Given list does not contain nodes")
       (return (boxBool false)))
      (else (return (cdr (assoc "node" (cdr ass))))))))

  (list lineof (list ass) (declare)
   (body
    (return (cdr (assocFail "line" (cdr ass) (boxInt -1))))
    ))

  (list subnameof (list ass) (declare)
   (body (return (cdr (assoc "subname" (cdr ass))))))

  (list nameof (list ass) (declare)
   (body (return (cdr (assoc "name" (cdr ass))))))

  (list childrenof (list ass) (declare)
   (body (return (cdr (assoc "children" (cdr ass))))))

  (bool
   isNode
   (list val)
   (declare)
   (body
    (if (isEmpty val)
      (then (return false))
      (else
       (if (isList val)
         (then
          (if (equalBox (boxSymbol "node") (car val))
            (then (return true))
            (else (return false))))
         (else (return false)))))))



    (bool isLeaf (list n) (declare)
       (body (return (equalBox (boxString "leaf") (subnameof n)))))

      (list noStackTrace () (declare)
    (body
    (return
     (cons (boxString "boxType")
     (cons (boxString "stringify")
     (cons (boxString "isEmpty")
     (cons (boxString "unBoxString")
     (cons (boxString "isList")
     (cons (boxString "unBoxBool")
     (cons (boxString "unBoxSymbol")
     (cons (boxString "equalBox")
     (cons (boxString "assoc")
     (cons (boxString "inList")
     (cons (boxString "unBoxInt")
     (cons (boxString "listLength")
     (cons (boxString "stroff")
     (cons (boxString "troff")
     (cons (boxString "tron")
     (cons (boxString "stron")
     (cons (boxString "car")
      (cons (boxString "cdr")
       (cons (boxString "cons")
        (cons (boxString "stackTracePush")
         (cons (boxString "stackTracePop")
          (cons (boxString "assertType")
           (cons (boxString "boxString")
           (cons (boxString "boxSymbol")
            (cons (boxString "boxInt") nil))))))))))))))))))))))))))))




    (list treeCompile (string filename) (declare (string programStr "") (list tree nil) )
     (body
      (set programStr (read-file filename))
      (set tree (readSexpr programStr filename))
      (return tree)))

    (list astBuild (string filename) (declare (string programStr "") (list tree nil) (list program nil))
     (body
      (set programStr (read-file filename))
      (set tree (readSexpr programStr filename))
      (set
       program
       (alistCons
        (boxString "includes")
        (astIncludes (first tree))
        (alistCons
         (boxString "types")
         (astTypes (second tree))
         (alistCons (boxString "functions") (astFunctions (third tree)) nil))))
      (set program (mergeIncludes program))
      (return program)
      ))

    (void astCompile (string filename) (declare  (list tree nil)(list replace nil) )
    (body
      (set tree (loadQuon filename))

      (qlog "Final program: \n")
      (set tree (loadIncludes tree))
      (set tree (macrowalk tree))
      (set tree (macrosingle tree "write-file" "luaWriteFile"))
      (set tree (macrosingle tree "read-file" "luaReadFile"))
      (set tree (macrosingle tree "string-length" "string.len"))
      
      (set tree (macrosingle tree "sub-string" "luaSubstring"))
      (set tree (macrosingle tree "stringLength" "string.len"))
       (set replace (symbolList "fprintf" "stderr"))
       (set tree (macrolist tree (stringConcatenate "q" "log") replace))
      (displayList tree 0 true)
      (qlog "Transformed tree")
      
      ;(set program (astBuild filename))
      ;(display program)
      (printf "\n")
    ))


  (list mergeIncludes (list program) (declare)
   (body
    (return
     (merge_recur
      (childrenof (cdr (cdr (assocPanic "includes" program "Program lacks include section"))))
      program))))

  (list merge_recur (list incs list program) (declare)
   (body
    (if (> (listLength incs) 0)
      (then
       (return (mergeInclude (car incs) (merge_recur (cdr incs) program))))
      (else (return program)))))

  (list
   mergeInclude
   (list inc list program)
   (declare
    (list newProgram nil)
    (list oldfunctionsnode nil)
    (list oldfunctions nil)
    (list newfunctions nil)
    (list newFunctionNode nil)
    (list functions nil)
    (list oldtypesnode nil)
    (list oldtypes nil)
    (list newtypes nil)
    (list newTypeNode nil)
    (list types nil))
   (body
    (if (isNil inc)
      (then (return program))
      (else
       (set functions (childrenof (cdr (assocPanic "functions" inc "Included file has no functions section"))))
       (set oldfunctionsnode (cdr (assocPanic "functions" program "Current module has no functions section")))
       (set oldfunctions (childrenof oldfunctionsnode))
       (set newfunctions (concatLists functions oldfunctions))
       (set
        newFunctionNode
        (cons
         (boxSymbol "node")
         (alistCons
          (boxSymbol "children")
          newfunctions
          (cdr oldfunctionsnode))))
       (set types (childrenof (cdr (assocPanic "types" inc "Included file has no types section"))))
       (set oldtypesnode (cdr (assocPanic "types" program "Current module has no types section")))
       (set oldtypes (childrenof oldtypesnode))
       (set newtypes (concatLists types oldtypes))
       (set
        newTypeNode
        (cons
         (boxSymbol "node")
         (alistCons (boxSymbol "children") newtypes (cdr oldtypesnode))))
       (set
        newProgram
        (alistCons
         (boxString "functions")
         newFunctionNode
         (alistCons
          (boxString "types")
          newTypeNode
          (alistCons
           (boxString "includes")
           (cons (boxSymbol "includes") nil)
           newProgram))))
       (return newProgram)))))






  ))
