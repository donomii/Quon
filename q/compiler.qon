((includes q/tests.qon q/macros.qon q/lists.qon)
 (types )
 (functions
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Parser functions
  ;;;;;;;;;;;;;;;;;;;;;;;

    (list
   filterVoid
   (list l)
   (declare (box token nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set token (car l))
       (if (equalString "void" (get-struct token typ))
         (then (return (filterVoid (cdr l))))
         (else (return (cons token (filterVoid (cdr l))))))))))
  (list
   filterTokens
   (list l)
   (declare (box token nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set token (car l))
       (if (equalString (boxType token) "symbol")
         (then
          (if (equalString "__LINE__" (stringify token))
            (then
             (return
              (cons
               (getTagFail token (boxString "line") (boxInt -1))
               (filterTokens (cdr l)))))
            (else
             (if (equalString "__COLUMN__" (stringify token))
               (then
                (return
                 (cons
                  (getTagFail token (boxString "column") (boxInt -1))
                  (filterTokens (cdr l)))))
               (else
                 (if (equalString "__FILE__" (stringify token))
                 (then
                   (return
                     (cons
                     (getTagFail token (boxString "filename") (boxString "Unknown file"))
                     (filterTokens (cdr l)))))
   (else
   (return (cons token (filterTokens (cdr l)))))))))))
         (else (return (cons token (filterTokens (cdr l))))))))))

  (box finish_token (string prog int start int len int line int column string filename) (declare (box token nil))
   (body
    (if (> len 0)
      (then
       (set token (boxSymbol (sub-string prog start len)))
       (set-struct
        token
        tag
        (alistCons (boxString "filename") (boxString filename)
         (alistCons (boxString "column") (boxInt column)
          (alistCons (boxString "line") (boxInt line)
           (alistCons (boxString "totalCharPos") (boxInt start) nil)))))
       (return token))
      (else (return (newVoid))))))

  (string readString (string prog int start int len) (declare (string token ""))
   (body
    (set token (sub-string prog (sub1 (add start len)) 1))
    (if (equalString "\"" token)
      (then (return (sub-string prog start (sub1 len))))
      (else
       (if (equalString "\\" token)
         (then (return (readString prog start (add 2 len))))
         (else (return (readString prog start (add1 len)))))
       ))))

  (string readComment (string prog int start int len) (declare (string token ""))
   (body
   (if (greaterthan  (add start  len)(string-length prog))
   (then (return ""))
   (else
    (set token (sub-string prog (sub1 (add start len)) 1))
    (if (isLineBreak token)
      (then (return (sub-string prog start (sub1 len))))
      (else (return (readComment prog start (add1 len)))))))))

  (bool
   isWhiteSpace
   (string s)
   (declare)
   (body
    (if (equalString " " s)
      (then (return true))
      (else
      (if (equalString "\t" s)
      (then (return true))
      (else
       (if (equalString "\n" s)
         (then (return true))
         (else
          (if (equalString "\r" s)
            (then (return true))
            (else (return false)))))))))))

  (bool isLineBreak (string s) (declare)
   (body
    (if (equalString "\n" s)
      (then (return true))
      (else
       (if (equalString "\r" s) (then (return true)) (else (return false)))))))
  (int
   incForNewLine
   (box token int val)
   (declare)
   (body
    (if (equalString "\n" (stringify token))
      (then (return (add1 val)))
      (else (return val)))))
  
(box annotateReadPosition (string filename int linecount int column int start box newBox) (declare)
(body
(return (setTag (boxString "filename")
                             (boxString filename)
                             (setTag (boxString "column")
                                     (boxInt column )
                                     (setTag (boxString "line" )
                                             (boxInt linecount )
                                             (setTag (boxString "totalCharPos" )
                                                     (boxInt start )
                                                     newBox)))))))

  (list scan (string prog int start int len int linecount int column string filename) (declare (box token nil) (string newString "") (box newBox nil))
   (body
   ;(qlog "Input: %s %d:%d\n" filename linecount column)
    (if (> (string-length prog) (sub start (sub 0 len)))
      (then
       (set token (boxSymbol (sub-string prog (sub1 (add start len)) 1)))
       (set-struct token tag (alistCons (boxString "totalCharPos") (boxInt start) nil))
       (if (isOpenBrace token)
         (then
          (return (cons
             (finish_token prog start (sub1 len) linecount column filename) (cons (boxSymbol (openBrace))
             (scan prog (add1 start) 1 linecount (add1 column) filename)))))
         (else
          (if (isCloseBrace token)
            (then
             (return
              (cons (finish_token prog start (sub1 len) linecount column filename)
               (cons (annotateReadPosition filename linecount column start (boxSymbol (closeBrace)))
                (scan prog (add start len) 1 linecount (add1 column) filename)))))
            (else
             (if (isWhiteSpace (stringify token))
               (then
                (return (cons (finish_token prog start (sub1 len) linecount column filename)
                  (scan prog (add start len) 1 (incForNewLine token linecount) 0 filename))))
               (else
                (if (equalBox (boxSymbol ";") token)
                  (then
                   (return (scan prog (add start (add1 (add1 (string-length (readComment prog (add1 start) len))))) 1 (add1 linecount) 0 filename)))
                  (else
                   (if (equalBox (boxSymbol "\"") token)
                     (then
                     (set newString (readString prog (add1 start) len))
                     (set newBox (annotateReadPosition filename linecount column start (boxString newString)))

                      (return (cons newBox (scan prog (add start (add1 (add1 (string-length newString)))) 1 linecount (add1 column) filename))))
                     (else
                      (return (scan prog start (sub len -1) linecount (add1 column) filename)))))))))))))
      (else (return (emptyList))))
    ))

  (bool isOpenBrace (box b) (declare)
   (body
    (if (equalBox (boxSymbol (openBrace)) b)
      (then (return true))
      (else (return false)))))

  (bool
   isCloseBrace
   (box b)
   (declare)
   (body
    (if (equalBox (boxSymbol (closeBrace)) b)
      (then (return true))
      (else (return false)))))



  (list skipList (list l) (declare (box b nil))
   (body
    (if (isEmpty l)
      (then (return (emptyList)))
      (else
       (set b (car l))
       (if (isOpenBrace b)
         (then (return (skipList (skipList (cdr l)))))
         (else
          (if (isCloseBrace b)
            (then (return (cdr l)))
            (else (return (skipList (cdr l)))))))))

    ))




;;;;;;;;;;;;;;;;;;;;;;
;; Parser functions ;;
;;;;;;;;;;;;;;;;;;;;;;

  (list makeNode (string name string subname list code list children) (declare)
   (body
    (return
     (cons
      (boxSymbol "node")
      (alistCons
       (boxSymbol "line")
       (getTagFail code (boxString "line") (boxInt -1))
       (cons
        (cons (boxSymbol "name") (boxString name))
        (cons
         (cons (boxSymbol "subname") (boxString subname))
         (cons
          (cons (boxSymbol "code") code)
          (alistCons (boxSymbol "children") children (emptyList))))))))))

(list addToNode (box key box val list node) (declare)
(body
(return (cons (boxSymbol "node") (alistCons key val (cdr node))))
))

  (list makeStatementNode (string name string subname list code list children box functionName) (declare)
    (body
      (return (addToNode (boxSymbol "functionName") functionName (makeNode name subname code children)))
))

  (list declarationsof (list ass) (declare)
   (body (return (cdr (assocPanic "declarations" (cdr ass) "Cons list has no declarations key")))))

  (list codeof (list ass) (declare)
   (body (return (cdr (assocPanic "code" (cdr ass) "Given cons list does not contain a code key")))))

  (list functionNameof (list ass) (declare)
   (body (return (cdr (assoc "functionName" (cdr ass))))))

  (list nodeof (list ass) (declare)
   (body
    (if (equalBox (boxBool false) (assoc "node" (cdr ass)))
      (then 
       (printf "Given list does not contain nodes")
       (return (boxBool false)))
      (else (return (cdr (assoc "node" (cdr ass))))))))

  (list lineof (list ass) (declare)
   (body
    (return (cdr (assocFail "line" (cdr ass) (boxInt -1))))
    ))

  (list subnameof (list ass) (declare)
   (body (return (cdr (assoc "subname" (cdr ass))))))

  (list nameof (list ass) (declare)
   (body (return (cdr (assoc "name" (cdr ass))))))

  (list childrenof (list ass) (declare)
   (body (return (cdr (assoc "children" (cdr ass))))))

  (bool
   isNode
   (list val)
   (declare)
   (body
    (if (isEmpty val)
      (then (return false))
      (else
       (if (isList val)
         (then
          (if (equalBox (boxSymbol "node") (car val))
            (then (return true))
            (else (return false))))
         (else (return false)))))))



    (bool isLeaf (list n) (declare)
       
       (body 
       ;(assertType "list" n __LINE__ __FILE__ )
        (return (equalBox (boxString "leaf") (subnameof n)))))

      (list noStackTrace () (declare)
    (body
    (return
     (cons (boxString "boxType")
     (cons (boxString "stringify")
     (cons (boxString "isEmpty")
     (cons (boxString "unBoxString")
     (cons (boxString "isList")
     (cons (boxString "unBoxBool")
     (cons (boxString "unBoxSymbol")
     (cons (boxString "equalBox")
     (cons (boxString "assoc")
     (cons (boxString "inList")
     (cons (boxString "unBoxInt")
     (cons (boxString "listLength")
     (cons (boxString "stroff")
     (cons (boxString "troff")
     (cons (boxString "tron")
     (cons (boxString "stron")
     (cons (boxString "car")
      (cons (boxString "cdr")
       (cons (boxString "cons")
        (cons (boxString "stackTracePush")
         (cons (boxString "stackTracePop")
          (cons (boxString "assertType")
           (cons (boxString "boxString")
           (cons (boxString "boxSymbol")
            (cons (boxString "boxInt") nil))))))))))))))))))))))))))))




    (list treeCompile (string filename) (declare
  (string programStr "") 
  (list tree nil) )
  (body
    (set programStr (read-file filename))
    (if (equalString programStr "")
      (then
        (printf "Error: Could not read file '%s'\n" filename)
        (return nil))
      (else
        (set tree (readSexpr programStr filename))
        (return tree)))))



  (list mergeIncludes (list program) (declare)
   (body
    (return
     (merge_recur
      (childrenof (cdr (cdr (assocPanic "includes" program "Program lacks include section"))))
      program))))

  (list merge_recur (list incs list program) (declare)
   (body
    (if (> (listLength incs) 0)
      (then
       (return (mergeInclude (car incs) (merge_recur (cdr incs) program))))
      (else (return program)))))

  (list
   mergeInclude
   (list inc list program)
   (declare
    (list newProgram nil)
    (list oldfunctionsnode nil)
    (list oldfunctions nil)
    (list newfunctions nil)
    (list newFunctionNode nil)
    (list functions nil)
    (list oldtypesnode nil)
    (list oldtypes nil)
    (list newtypes nil)
    (list newTypeNode nil)
    (list types nil))
   (body
    (if (isNil inc)
      (then (return program))
      (else
       (set functions (childrenof (cdr (assocPanic "functions" inc "Included file has no functions section"))))
       (set oldfunctionsnode (cdr (assocPanic "functions" program "Current module has no functions section")))
       (set oldfunctions (childrenof oldfunctionsnode))
       (set newfunctions (concatLists functions oldfunctions))
       (set
        newFunctionNode
        (cons
         (boxSymbol "node")
         (alistCons
          (boxSymbol "children")
          newfunctions
          (cdr oldfunctionsnode))))
       (set types (childrenof (cdr (assocPanic "types" inc "Included file has no types section"))))
       (set oldtypesnode (cdr (assocPanic "types" program "Current module has no types section")))
       (set oldtypes (childrenof oldtypesnode))
       (set newtypes (concatLists types oldtypes))
       (set
        newTypeNode
        (cons
         (boxSymbol "node")
         (alistCons (boxSymbol "children") newtypes (cdr oldtypesnode))))
       (set
        newProgram
        (alistCons
         (boxString "functions")
         newFunctionNode
         (alistCons
          (boxString "types")
          newTypeNode
          (alistCons
           (boxString "includes")
           (cons (boxSymbol "includes") nil)
           newProgram))))
       (return newProgram)))))






  ))
