((includes)
 (types)
 (functions

 (string dollar () (declare)
      (body
       (return (character 36))))

(string atsymbol () (declare)
      (body
       (return (character 64))))

(string singleQuote () (declare)
      (body
       (return "'")))

(string escapedSingleQuote () (declare)
      (body
       (return "\\'")))

(string escapeSingleQuotes (string s) (declare)
   (body
    (return (stringReplace (singleQuote) (escapedSingleQuote) s))))

  (list getGlobalVariables () (declare)
   (body
    (return (makeList (boxSymbol "stderr") (boxSymbol "true") (boxSymbol "false") (boxSymbol "releaseMode") (boxSymbol "caller") (boxSymbol "globalTrace") (boxSymbol "globalStepTrace")(boxSymbol "globalStackTrace")(boxSymbol "globalArgsCount") (boxSymbol "globalArgs") (boxSymbol "quonGlobalArgs")))))

  (list collectVariables (list args list decls) (declare (list variables nil) (box decl nil))
   (body
    (set variables (collectVariablesFromArgs args))
    (set variables (appendVariables variables (collectVariablesFromDecls decls)))
    (set variables (appendVariables variables (getGlobalVariables)))
    (return variables)))

(void perlGlobalVariables () (declare)
   (body
    (printf (StringListJoin (stringList "our " (dollar) "globalArgsCount;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "globalArgs;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "releaseMode;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "globalTrace;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "globalStepTrace;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "globalStackTrace;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "caller;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "false = 0;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "true = 1;\n") ""))
    (printf (StringListJoin (stringList "my " (dollar) "stderr = \\*STDERR;\n") ""))
    (printf (StringListJoin (stringList "our " (dollar) "quonGlobalArgs;\n") ""))))

(void perlMainEntry () (declare)
   (body
    (printf "\n# Main entry point\n")
    (printf (StringListJoin (stringList (dollar) "globalArgsCount = scalar(" (atsymbol) "ARGV) + 1;\n") ""))
    (printf (StringListJoin (stringList (dollar) "globalArgs = \\" (atsymbol) "ARGV;\n") ""))
    (printf (StringListJoin (stringList "unshift " (atsymbol) (dollar) "globalArgs, 'fixmeprogname' ;\n") ""))
    (printf (StringListJoin (stringList (dollar) "quonGlobalArgs = [];\n") ""))
    (printf (StringListJoin (stringList "for my " (dollar) "arg (" (atsymbol)  (dollar) "globalArgs) {\n") ""))
    (printf (StringListJoin (stringList "    push " (atsymbol)  (dollar) "quonGlobalArgs, {car => " (dollar) "arg, cdr => undef};\n") ""))
    (printf (StringListJoin (stringList "}\n") ""))
    (printf (StringListJoin (stringList "for (my " (dollar) "i = scalar(" (atsymbol)  (dollar) "quonGlobalArgs) - 1; " (dollar) "i >= 0; " (dollar) "i--) {\n") ""))
    (printf (StringListJoin (stringList "    " (dollar) "quonGlobalArgs->[" (dollar) "i]->{cdr} = " (dollar) "quonGlobalArgs->[" (dollar) "i + 1];\n") ""))
    (printf (StringListJoin (stringList "}\n") ""))
    (printf (StringListJoin (stringList "*stderr = *STDERR;\n") ""))
    (printf (StringListJoin (stringList "sub fprintf { my " (dollar) "f = shift; printf " (dollar) "f " (atsymbol) "_ }\n") ""))
    (printf (StringListJoin (stringList "start();\n") ""))))

(list collectVariablesFromArgs (list args) (declare (list variables nil))
   (body
    (if (isNil args)
      (then (return variables))
      (else
       (if (equalString (stringify (first args)) "list")
         (then
           (set variables (cons (second args) variables))
           (return (appendVariables variables (collectVariablesFromArgs (cddr args)))))
         (else
           (set variables (cons (second args) variables))
           (return (appendVariables variables (collectVariablesFromArgs (cddr args))))))))))

(list collectVariablesFromDecls (list decls) (declare (list variables nil) (box decl nil))
   (body
    (if (isNil decls)
      (then (return variables))
      (else
       (set decl (car decls))
       (set variables (cons (second decl) variables))
       (return (appendVariables variables (collectVariablesFromDecls (cdr decls))))))))

(list appendVariables (list vars1 list vars2) (declare)
   (body
    (if (isNil vars2)
      (then
        (return vars1))
      (else 
        (set vars1 (cons (car vars2) vars1))
        (return (appendVariables vars1 (cdr vars2)))))))

(void perlFunctionArgs (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (printf (dollar))
       (display (second tree))
       (if (isNil (cddr tree)) (then (printf "")) (else (printf ", ")))
       (perlFunctionArgs (cddr tree))))))

(void perlExpression (list tree int indent list variables) (declare (list thing nil))
   (body
    (if (isList tree)
      (then
       (if (equal 1 (listLength tree))
         (then
          (display (perlFuncMap (car tree) variables))
          (if (equalBox (boxString "return") (car tree))
            (then )
            (else (printf "()"))))
         (else
          (set thing (first tree))
          (if (equalBox (boxSymbol "get-struct") thing)
            (then
             (printf (StringListJoin (stringList (dollar)  "%s->{%s}") "")
              (stringify (second tree))
              (stringify (third tree))))
            (else
             (if (equalBox (boxSymbol "new") thing)
               (then
                (printf "{}")
               )
               (else
                (if (equalBox (boxSymbol "passthrough") thing)
                  (then
                   (printf "%s" (stringify (second tree))))
                  (else
                   (if (equalBox (boxSymbol "binop") thing)
                     (then
                      (printf "(")
                      (perlExpression (third tree) indent variables)
                      (printf " %s " (stringify (second tree)))
                      (perlExpression (fourth tree) indent variables)
                      (printf ")"))
                     (else
                      (printf "%s(" (stringify (perlFuncMap (car tree) variables)))
                      (perlRecurList (cdr tree) indent variables)
                      (printf ")")))))))))))
      )
      (else
       (if (equalString "string" (boxType tree))
         (then
           (printf "\"\%s\"" (escapeSingleQuotes (stringify tree))))
         (else (display (perlFuncMap tree variables))))))))

(void perlRecurList (list expr int indent list variables) (declare)
   (body
    (if (isEmpty expr)
      (then (return))
      (else
       (perlExpression (car expr) indent variables)
       (if (isNil (cdr expr))
         (then (printf ""))
         (else (printf ", ") (perlRecurList (cdr expr) indent variables)))))))

(void perlStatement (list node int indent list variables) (declare)
   (body
    (if (equalBox (boxString "set") (first node))
      (then (perlSet node indent variables))
      (else
       (if (equalBox (boxString "set-struct") (first node))
         (then (perlSetStruct node indent variables))
         (else
          (if (equalBox (boxString "if") (first node))
            (then (perlIf node indent variables))
            (else
             (if (equalBox (boxString "return") (first node))
               (then 
                (newLine indent)
                (printf "return")
                (if (greaterthan (listLength node) 1)
                  (then 
                    (printf " ")
                    (perlExpression (cadr node) indent variables))
                  (else (printf ""))))
               (else
                (newLine indent)
                (perlExpression node indent variables)))))))))
    (printf ";\n")))

(void perlBody (list tree int indent list variables) (declare (list code nil))
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (set code (car tree))
       (perlStatement code indent variables)
       (perlBody (cdr tree) indent variables)))))

(void perlSet (list node int indent list variables) (declare)
   (body
    (newLine indent)
    (printf "%s = " (stringify (perlFuncMap (first (cdr node)) variables)))
    (perlExpression (third node) indent variables)))

(void perlSetStruct (list node int indent list variables) (declare)
   (body
    (newLine indent)
    (printf "%s->{%s} = "
     (stringify (perlFuncMap (second node) variables))
     (stringify (third node)))
    (perlExpression (fourth node) indent variables)))

(void perlIf (list node int indent list variables) (declare)
   (body
    (newLine indent)
    (printf "if ( ")
    (perlExpression (second node) 0 variables)
    (printf " ) {")
    (perlBody (cdr (third node)) (add1 indent) variables)
    (newLine indent)
    (printf "} else {")
    (perlBody (cdr (fourth node)) (add1 indent) variables)
    (newLine indent)
    (printf "}")))



(void perlGetStruct (list node int indent) (declare)
   (body
    (newLine indent)
    (printf (StringListJoin (stringList (dollar) "%s->{%s}") "")
     (stringify (first node))
     (stringify (second node)))))




(void perlDeclarations (list decls int indent list variables) (declare (box decl nil))
   (body
    (if (isEmpty decls)
      (then (return))
      (else
       (set decl (car decls))
       (printf (StringListJoin (stringList "my "(dollar) "%s = ") "") (stringify (second decl)))
       (perlExpression (third decl) indent variables)
       (printf ";\n")
       (perlDeclarations (cdr decls) indent variables)))))

(void perlFunction (list node) (declare (box name nil) (list variables nil) (list args nil) (list decls nil))
   (body
    (set name (second node))
    (printf "\n\n# Function %s from line %s" (stringify name) (stringify (getTag name (boxString "line"))))
    (newLine 0)
    (if (isNil node)
      (then (return))
      (else
       (newLine 0)
       (printf "sub %s {" (stringify (second node)))
       (newLine 1)
       (printf "my (")
       (perlFunctionArgs (third node))
       (printf (StringListJoin (stringList ") = " (atsymbol) "_;") ""))
       (newLine 1)
       ; Collect all variables (arguments and declarations)
       (set args (third node))
       (set decls (cdr (fourth node)))
       (set variables (collectVariables args decls))
       (perlDeclarations decls 1 variables)
       (perlBody (cdr (fifth node)) 1 variables)
       (printf "\n}\n")))))

(void perlForwardDeclaration (list node) (declare)
   (body
    (if (isNil node)
      (then (return))
      (else
       (printf "sub %s;" (stringify (second node)))))))

(void perlForwardDeclarations (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (perlForwardDeclaration (car tree))
       (perlForwardDeclarations (cdr tree))))))

(void perlFunctions (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (perlFunction (car tree))
       (perlFunctions (cdr tree))))))

(void perlIncludes (list nodes) (declare)
   (body
    (printf "use strict;\n")
    (printf "use warnings;\n")
    (printf "use v5.10;\n\n")
    (printf "no warnings 'recursion';\n")
    (printf  (StringListJoin (stringList "our " (dollar) "^M = 10_000;\n") ""))
    ))

(box perlTypeMap (box aSym) (declare (list symMap nil))
   (body
    (set symMap
     (alistCons (boxSymbol "stringArray") (boxSymbol "array")
      (alistCons (boxSymbol "string") (boxSymbol "string") nil)))
    (if (truthy (assoc (stringify aSym) symMap))
      (then (return (cdr (assoc (stringify aSym) symMap))))
      (else (return aSym)))))

(box perlFuncMap (box aSym list variables) (declare (list symMap nil))
   (body
    (if (equalString "symbol" (boxType aSym))
      (then

       (if (inList aSym variables)
         (then (return (boxSymbol (stringConcatenate (dollar) (stringify aSym)))))
         (else
          (set symMap
          (alistCons (boxSymbol "sub") (boxSymbol "subtract")
           (alistCons (boxSymbol "=") (boxSymbol "equal")
            (alistCons (boxSymbol "sub-string") (boxSymbol "substr")
             (alistCons (boxSymbol "read-file") (boxSymbol "read_file")
              (alistCons (boxSymbol "write-file") (boxSymbol "write_file")
               (alistCons (boxSymbol ">") (boxSymbol "greaterthan")
                (alistCons (boxSymbol "string-length") (boxSymbol "length")
                 (alistCons (boxSymbol "nil") (boxSymbol "undef") nil)))))))))
          (if (truthy (assoc (stringify aSym) symMap))
            (then (return (cdr (assoc (stringify aSym) symMap))))
            (else (return aSym))))))
      (else (return aSym)))))
(void perlCompile (string filename) (declare (list tree nil)(list replace nil))
    (body
     (qlog "Scanning file...%s\n" filename)
     (set tree (loadQuon filename))
     (qlog "Adding shim functions\n")
     (set tree (insertInclude tree "q/shims/perl.qon"))
     (qlog "Loading includes\n")
     (set tree (loadIncludes tree))
     (qlog "Walking tree\n")
     (set tree (macrowalk tree))
    (qlog "Replacing q log\n")
     (set replace (symbolList "fprintf" "stderr"))
     (set tree (macrolist tree (stringConcatenate "q" "log") replace))
     (qlog "Printing program\n")
     (perlIncludes (cdr (first tree)))
     (perlGlobalVariables)
     (perlFunctions (cdr (third tree)))
     (perlMainEntry)
     (printf "\n")))

))

