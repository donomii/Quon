((includes)
 (types
(uint int unsigned))
typedef int*  array;\ntypedef int bool;\n#define true 1\n#define false 0\n\n\n
(char* caller;\nchar** globalArgs;\nint globalArgsCount;
 (functions

(char* getEnv (char* key)(declare)
	(body
		(return getenv(key))))

(void panic(char* s)(declare)
	(body
		(abort)
		(exit(1))
))

(int sub (int a  int b) (declare)
	(body
		(return (binop a - b))))

(float mult(int a  int b) (declare)
	(body
		(return (binop a * b))))

(int greaterthan(int a int b) (declare)
	(body
		(return (binop a > b))))

(float subf(float a float b) (declare)
	(body
		(return (binop a - b))))

(float multf(float a float b) (declare)
	(body
		(return (binop a * b))))

(int greaterthanf(float a float b) (declare)
	(body
		(return (binop a > b))))

(int equal(int a int b) (declare)
	(body
		(return (binop  a == b))))

(int equalString(char* a char* b) (declare)
	(body
		(return (not (strcmp a b)))))

(int andBool(int a int b) (declare)
	(body
		(return (binop  a == b))))

(int string_length(char* s) (declare)
	(body
		(return (strlen s))
))

(char* setSubString (char* target int start char* source)(declare)
	(body
		(set target[start] source[0])
		(return target)
))

(char* sub_string(char* s int start int length) (declare (char* substr ""))
	(body
		(set substr  (calloc (add length 1) 1))
		(strncpy substr  (add s start) length)
		(return substr)
))

(char* stringConcatenate(char* a char* b) (declare (int len 0)(char* target nil))
	(body
		(set len (add (add (strlen a) + (strlen b)) + 1))
		(target (calloc len 1))
		(strncat target  a  len)
		(strncat target  b  len)
		(return target)
))
	
(char* intToString(int a) (declare (int len 0)(char* target nil))
	(body
         (set len  100)
         (set target  (calloc len 1))
         (snprintf target  99  \"%d\"  a)
         (return target)
))

(void* gc_malloc( uint size ) (declare)
	(body
         (return (malloc size))
))

(int* makeArray(int length) (declare (int* array nil))
	(body
         (set array (gc_malloc (mult (length (sizeof int)))))
         (return array)
))
    
(int at(int* arr  int index) (declare)
    	(body
         (return arr[index])
))
    
(void setAt(int* array  int index  int value)(declare)
    	(body
         (set  array[index] value)
))
    
    (char* read_file(char * filename) (declare (char* buffer nil) (long length 0) (FILE* f nil))
    	(body
    (set f (fopen filename \"rb\"))
    (if (f)
    	(then (fseek f 0 SEEK_END))
	    (else (set length (ftell f)))
    (fseek f 0 SEEK_SET)
    (set buffer (malloc length))
    
    (if (equal? buffer NULL) 
    	(then
		(printf "Malloc failed!\n")
		(exit 1))
	(else))
	(if (buffer)\n  
	(then fread (buffer, 1, length, f))
        (else ))
	
	(fclose f)
	(return buffer)
	))


	(void write_file (char * filename char * data)   (declare (char* buffer nil) (long length 0) (FILE* f nil))
	(set f (fopen filename "w"))
	(if (nil(f))
	(then (printf "Error opening file!"))
	(else (exit 1)))
	fprintf(f, \"%s\", data);
	fclose(f)
	
	(char* getStringArray(int index char** strs) 
	(return strs[index])
	))
	
	
	\nbool globalTrace = false;\nbool globalStepTrace = false;\n\n
(int main( int argc char *argv[] )  (declare)
	(body
         (set  globalArgs  argv)
         (set globalArgsCount argc)
         (set caller (calloc 1024 1))
         (return (start))
))
	
(char* character(int num)  (declare (char* buffer nil))
    	(body
         (char *string = malloc(2))
         (if (!string) 
             (then return 0)
             (else))
         (set string[0]  num)
         (set string[1]  0)
         (return string)
))
    
    
(void qlog(char* format ... ...)  (declare (va_list args nil))
	(body
         (va_start args format)
         (vfprintf stderr format args)
         (va_end args)
))


(void displays (string s) (declare)
	(body
         (printf "%s" s)
))

   

 
